#!/bin/bash

# Script orientation/environment
SCRIPT_DIR=$(dirname $0)
SCRIPT_NAME="${0##*/}"

if [[ $# -eq 0 ]]
then
    cat <<-EOF 1>&2
	
	Usage: $0 [--namespace <NAMESPACE>] [--input "INPUT STRINGS"] <command [command options]> <...>
	
	Commands all start with ':' (pipe-able) or '@' (foreground).  

	Filter with '/' and negative filter with '^', or use the :grep command.

	Most commands are ':' commands, and most commands are kubectl commands one-for-one.
	
	Some quick examples:
	    :get deployment
	    :get pod
	    :describe pod
	    :desc pod
	    :name pod
	    :name pod :first :yaml
	    :name pod :yaml
	    :name pod :first :bash
	    :name pod /gui :first :logs
	    :name deployment :first :jsonpath '{.spec}'

	Read the README.md for more information.

	EOF
    exit 1
fi

# Buffers for pcmd actions
stdoutbuf=$(mktemp)
stdoutbufprev=$(mktemp)
trap "rm $stdoutbuf $stdoutbufprev" EXIT

# Where's kubectl?

if [[ ! -v KUBECTL ]]
then
    KUBECTL=kubectl
fi

parse_flags=true
while $parse_flags
do
    case "$1" in
        --namespace|-n)
            shift
            KUBECTL="$KUBECTL -n $1"
            shift
        ;;
        --input|-i)
            shift
            echo "$1" > $stdoutbufprev
            shift
        ;;
        --)
            parse_flags=false
            shift
        ;;
        *)
            parse_flags=false
        ;;
    esac
done
if uname -a | grep -Eqi 'mingw|cygwin'
then
    PTTY=winpty
else
    PTTY=""
fi

# Swap buffers in preparation for next command
new_buffer() {
    mv $stdoutbuf $stdoutbufprev
    echo "" > $stdoutbuf
}

# Util function: how many lines are in the incoming buffer?
__stdoutbufprev_lines() {
    wc -l < $stdoutbufprev
}

# Util function: Fail if there are no lines in incoming buffer
__require_stdoutbufprev_is_filled() {
    local lines=$(__stdoutbufprev_lines)
    if [[ $lines -lt 1 ]]
    then
        echo "ERROR: $cmdfunction must receive at least 1 input object to operate."
        exit 1
    fi
}

# Util function: Fail if there's not a single line in incoming buffer
__require_stdoutbufprev_is_one_line() {
    local lines=$(__stdoutbufprev_lines)
    if [[ $lines -lt 1 ]]
    then
        echo "ERROR: $cmdfunction must receive an input object to operate."
        exit 1
    elif [[ $lines -gt 1 ]]
    then
        echo "ERROR: $cmdfunction is limited to operating on only one object. Buffer:"
        cat $stdoutbufprev
        exit 1
    fi
}


# Kick off the next command
__exec() {
    if [[ -n "$cmdfunction" ]]
    then
        funcname="${cmdfunction}"
        if ! declare -F $funcname >/dev/null
        then
            funcname=_pcmddefault
        fi

        callfunc="${funcname} ${cmdopts}"
        #echo "callfunc=$callfunc" 1>&2
        eval $callfunc
        if [[ -n "$filtercmd" ]]
        then
            new_buffer
            eval cat $stdoutbufprev $filtercmd > $stdoutbuf
        fi
    fi
}

# Resolve pcmd tokens and aliases into their necessary functions
__pcmdresolve() {
    case "$1" in
        :b64encode)
            echo _pcmd__base64encode
            ;;
        :b64|:b64decode)
            echo _pcmd__base64decode
            ;;
        :d|:desc)
            echo _pcmd__describe
            ;;
        :g)
            echo _pcmd__get
            ;;
        :l)
            echo _pcmd__logs
            ;;
        :ord)
            echo _pcmd__ordinal
            ;;
        :r)
            echo _pcmd__rollout
            ;;
        :v)
            echo _pcmd__vim
            ;;
        :y)
            echo _pcmd__yaml
            ;;
        *)
            echo "_pcmd__${1#:}"
            ;;
    esac
}

# Resolve fcmd tokens and aliases into their necessary functions
__fcmdresolve() {
    case "$1" in
        @f)
            echo follow
            ;;
        *)
            echo "_fcmd__${1#@}"
            ;;
    esac
}

# MAIN FUNCTION: Parse/Munge the input string
dispatch() {
    while [[ "$#" -gt 0 ]]
    do
        cmdfunction=""
        cmdopts=""
        filtercmd=""
        while [[ "$#" -gt 0 ]]
        do
            if [[ ( "$1" == :* ) || ( "$1" == @* ) ]] && [[ -n "$cmdfunction" ]]; then break; fi
            case "$1" in
                :[a-z]*)
                    cmdfunction=$(__pcmdresolve $1)
                    cmdname="${cmdfunction#_pcmd__}"
                ;;
                @[a-z]*)
                    cmdfunction=$(__fcmdresolve $1)
                    cmdname="${cmdfunction#_fcmd__}"
                ;;
                /*)
                    if [[ -z "$cmdfunction" ]]; then 
                        echo "ERROR: dispatch found an unexpected filter: \"$1\"" 1>&2
                        exit 1
                    fi
                    # filter
                    filtercmd="$filtercmd | grep -Ei -- '${1#/}'"
                ;;
                ^*)
                    if [[ -z "$cmdfunction" ]]; then 
                        echo "ERROR: dispatch found an unexpected filter: \"$1\"" 1>&2
                        exit 1
                    fi
                    # filter
                    filtercmd="$filtercmd | grep -Eiv -- '${1#^}'"
                ;;
                *)
                    # command option or argument (this is a catch-all)
                    if [[ -z "$cmdfunction" ]]; then 
                        echo "ERROR: dispatch found an unexpected bareword: \"$1\"" 1>&2
                        exit 1
                    fi
                    cmdopts="$cmdopts $1"
                ;;
            esac
            shift
        done
        __exec

        if [[ "$#" -eq 0 ]]
        then
            cat $stdoutbuf
            exit 0
        fi

        new_buffer

    done

}


###############################################################################
#
# BULK FUNCTIONALITY
#
###############################################################################
_pcmddefault() {
    # is this even a kubectl command?
    if ! $KUBECTL $cmdname --help >/dev/null 2>/dev/null
    then
        echo "Neither 'kubectl' nor '$SCRIPT_NAME' defines a command '$cmdname'." 1>&2
        exit 1
    fi
    __require_stdoutbufprev_is_filled
    $KUBECTL $cmdname $* $(cat $stdoutbufprev) 
}

_pcmd__bash() {
    __require_stdoutbufprev_is_one_line
    "$PTTY" "$KUBECTL" exec -it $(cat $stdoutbufprev) -- bash
}
_pcmd__base64decode() {
    base64 -d $stdoutbufprev > $stdoutbuf
}
_pcmd__base64encode() {
    base64 $stdoutbufprev > $stdoutbuf
}
_pcmd__config() {
    $KUBECTL config $* $(cat $stdoutbufprev)
}
_pcmd__describe() {
    $KUBECTL $cmdname $* $(cat $stdoutbufprev) 
}
_pcmd__first() {
    head -n 1 $stdoutbufprev > $stdoutbuf
}
_fcmd__follow() {
    __require_stdoutbufprev_is_one_line
    $KUBECTL logs $* --follow $(cat $stdoutbufprev) 
}
_pcmd__get() {
    # get does not require prior input
    $KUBECTL $cmdname $* $(cat $stdoutbufprev) 
}
_pcmd__grep() {
    # get does not require prior input
    $KUBECTL $cmdname $* $(cat $stdoutbufprev) 
}
_pcmd__jq() {
    if ! which jq >/dev/null 2>/dev/null
    then
        echo "jq not found in PATH, cannot execute '$cmdfunction'" 1>&2
        exit 1
    fi
    __require_stdoutbufprev_is_filled
    $KUBECTL get -o json $(cat $stdoutbufprev) | jq "$*" > $stdoutbuf
}
_pcmd__json() {
    # get -o json does not require prior input
    $KUBECTL get -o json $(cat $stdoutbufprev) > $stdoutbuf
}
_pcmd__jsonpath() {
    # get -o jsonpath does not require prior input
    $KUBECTL get -o=jsonpath="$*" $(cat $stdoutbufprev) > $stdoutbuf
}
_pcmd__name() {
    # get -o name does not require prior input
    $KUBECTL get -o name $* > $stdoutbuf
}
_pcmd__ordinal() {
    sed -n "${1}p" $stdoutbufprev > $stdoutbuf
}
_pcmd__sed() {
    sed "$@" < $stdoutbufprev > $stdoutbuf
}
_pcmd__setns() {
    if [[ "$#" -eq 0 ]]
    then
        __require_stdoutbufprev_is_one_line
        $KUBECTL config set-context --current --namespace=$(cat $stdoutbufprev)
    else
        $KUBECTL config set-context --current --namespace=$*
    fi
}
_pcmd__vi() {
    cp $stdoutbufprev $stdoutbuf
    vi $stdoutbuf || exit 1
}
_pcmd__vim() {
    cp $stdoutbufprev $stdoutbuf
    vim $stdoutbuf || exit 1
}
_pcmd__yaml() {
    # get -o yaml does not require prior input
    $KUBECTL get -o yaml $* $(cat $stdoutbufprev) > $stdoutbuf
}

###############################################################################
#
# MAIN: Send to dispatch
#
###############################################################################
dispatch "$@"

